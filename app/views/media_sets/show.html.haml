- content_for :content do
  .ui-container.rounded-right.rounded-bottom.tab-content
      
    .ui-container.bright.bordered.pal
      .ui-set-overview

        .ui-set-preview
          = render :partial => "media_resources/media_resource",
           :locals => {:media_resource => @media_set}

        .ui-metadata-box.ui-summary-table.ui-set-summary
          %table.borderless
            %tbody
              = render :partial => "meta_data/meta_datum", :collection => @media_set.meta_data.for_context(MetaContext.find("media_set")), 
                       :locals => {:context => MetaContext.find("media_set"), 
                                   :as_table => true}

    = render :partial => "media_sets/highlights" unless @highlights.blank?

    #ui-resources-list-container.ui-container.midtone.bordered.rounded-bottom

      - count_visible = @media_set.child_media_resources.accessible_by_user(current_user,:view).count
      - count_invisible = @media_set.child_media_resources.count
      - subtitle = count_visible == count_invisible ? n_("%d item", "%d items", count_visible) % count_visible : _("%d of %d items visible to you") % [count_visible, count_invisible]
      = render :partial => "media_resources/list/toolbar", 
                 :locals => {:title => _("Set contains"),
                             :subtitle => subtitle,
                             :actions => render(:partial => "media_sets/actions/save_display_settings")}

      = render :partial => "media_resources/list/filterbar"

      .ui-resources-holder

        .ui-container.table.auto

          = render :partial => "media_resources/list/filter"

          .ui-container.table-cell.table-substance
            
            %ul#ui-resources-list.ui-resources{:class => ui_resources_class}

              .pvh.mth
                .ui-preloader

  :coffeescript
    jQuery -> 
      mediaResourcesController = new App.MediaResourcesController.Index
        baseFilter: #{{:media_set_id => @media_set.id.to_s}.to_json}
        startFilterParams: #{MediaResource.get_filter_params(params).to_json}

      new App.MediaSetsController.DisplaySettings
        mediaResourcesController: mediaResourcesController
        layout: #{@media_set.settings[:layout].to_json}
        sorting: #{@media_set.settings[:sorting].to_json}

= render :partial => "media_sets/layout"
